plugins {
    id 'java'
    id 'maven'
    id 'application'
}
apply from: 'properties.gradle'

repositories {
    mavenCentral()
}

mainClassName = 'org.sourceforge.autojar.Autojar'

dependencies {
    implementation     "org.apache.bcel:bcel:6.3"
    implementation     "org.apache.logging.log4j:log4j-api:2.11.2"
    implementation     "org.apache.logging.log4j:log4j-core:2.11.2"
    testImplementation "junit:junit:4.12"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
    extension "jar"
}

sourceCompatibility = javaSourceCompatibility
targetCompatibility = javaTargetCompatibility
compileJava {
    options.encoding = sourceEncoding
    sourceCompatibility = javaSourceCompatibility
    targetCompatibility = javaTargetCompatibility
}
compileTestJava {
    options.encoding = sourceEncoding
    sourceCompatibility = javaSourceCompatibility
    targetCompatibility = javaTargetCompatibility
}

application {
    mainClassName = mainClassName
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'

    if (System.getenv('CI')) {
        publishAlways()
        tag 'CI'
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

configure(install.repositories.mavenInstaller) {
    pom.project {
        inceptionYear project_inceptionyear
        name project_name
        packaging 'jar'
        description project.description

        url project_url

        scm {
            url scm_url
            connection scm_connection
            developerConnection scm_devconnection
        }

        licenses {
            license {
                name license_id
                url license_url
                distribution license_distribution
            }
        }

        developers {
            developer {
                name developer_name
                id developer_id
                email developer_email
            }
        }
    }
}

// Workaround for the fact that Gradle sets the working directory to the project directory by default.
run.workingDir = (project.hasProperty('runWorkingDir')) ? new File(project.runWorkingDir) : project.projectDir
